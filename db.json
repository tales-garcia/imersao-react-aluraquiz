{
  "bg": "https://miro.medium.com/max/4000/0*hhdjdEgUL_lT60VS.png",
  "title": "Quiz Typescript",
  "description": "Quiz de typescript AVANÇADO",
  "questions": [
    {
      "image": "https://media.giphy.com/media/xUOxf3yDKCuwpOlT3i/giphy.gif",
      "title": "Como declarar uma interface?",
      "description": "Se liga, é bem fácil",
      "answer": 2,
      "alternatives": [
        "public interface {}",
        "const Interface = interface {}",
        "interface Interface {}",
        "interface Interface = {}"
      ]
    },
    {
      "image": "https://media.giphy.com/media/13FrpeVH09Zrb2/giphy.gif",
      "title": "Qual a extensão certa para um arquivo de declaração?",
      "description": "Só para aquecer",
      "answer": 0,
      "alternatives": [
        "nomeDoArquivo.d.ts",
        "nomeDoArquivo.ts",
        "nomeDoArquivo.dec.ts",
        "nomeDoArquivo.tsd"
      ]
    },
    {
      "image": "https://media.giphy.com/media/13FrpeVH09Zrb2/giphy.gif",
      "title": "Como declarar um tipo em um arquivo de declaração?",
      "description": "Se prepara que essa ainda é fácil",
      "answer": 3,
      "alternatives": [
        "export type tipo = {}",
        "type Tipo = {}",
        "type Tipo {}",
        "declare type Tipo = {}"
      ]
    },
    {
      "image": "https://media.giphy.com/media/xT9IgzoKnwFNmISR8I/giphy.gif",
      "title": "Como receber parâmetros generic em um type?",
      "description": "Para amadores",
      "answer": 1,
      "alternatives": [
        "type Tipo<T as string>",
        "type Tipo<T extends string>",
        "type Tipo<T implements String>",
        "type Tipo<T: string>"
      ]
    },
    {
      "image": "https://media.giphy.com/media/26tn33aiTi1jkl6H6/giphy.gif",
      "title": "Como declarar um type iterável por string?",
      "description": "Essa você já deve saber",
      "answer": 2,
      "alternatives": [
        "type Tipo = { (key extends string): any; }",
        "type Tipo = { [key extends string]: any; }",
        "type Tipo = { [key: string]: any; }",
        "type Tipo = { string: any; }"
      ]
    },
    {
      "image": "https://media.giphy.com/media/26tn33aiTi1jkl6H6/giphy.gif",
      "title": "Como dizer que a key é um valor generic?",
      "description": "Nível mediano",
      "answer": 2,
      "alternatives": [
        "type Tipo<T extends string> { [key extends T]: any }",
        "type Tipo<T extends string> { [key: T]: any }",
        "type Tipo<T extends string> { [key in T]: any }",
        "type Tipo<T extends string> { (key: T): any }"
      ]
    },
    {
      "image": "https://media.giphy.com/media/l2JeblbdfRL0i2qOI/giphy.gif",
      "title": "Como declarar um módulo em um arquivo de declaração?",
      "description": "Quem já espiou um arquivo de declaração já sabe.",
      "answer": 3,
      "alternatives": [
        "export default module 'module';",
        "export module = 'module';",
        "declare namespace 'module' = {};",
        "declare module 'module';"
      ]
    },
    {
      "image": "https://media.giphy.com/media/kigfYxdEa5s1ziA2h1/giphy.gif",
      "title": "Como se declara uma key opcional em uma interface?",
      "description": "Essa é fácil",
      "answer": 0,
      "alternatives": [
        "{ key?: any; }",
        "{ [key: partial]: any; }",
        "{ (key: partial): any; }",
        "{ key: any?; }"
      ]
    },
    {
      "image": "https://media.giphy.com/media/RNWkmkrpvW6t7em1mD/giphy.gif",
      "title": "Qual é uma ferramenta do Typescript para excluir um chave?",
      "description": "Tem que lembrar",
      "answer": 1,
      "alternatives": [
        "Partial<Tipo, \"key\">",
        "Omit<Tipo, \"key\">",
        "Exclude<Tipo, \"key\">",
        "Partial<\"key\">"
      ]
    },
    {
      "image": "https://i.ibb.co/1fLynFx/Captura-de-Tela-2021-01-29-a-s-18-57-03.png",
      "title": "Agora para finalizar: Se declararmos um objeto com o tipo acima qual será seu formato?",
      "description": "const object: Tipo<object, \"key1\" | \"key2\", string | number>",
      "answer": 1,
      "alternatives": [
        "{ key1: string, key2: number }",
        "{ key1: string | number, key2: string | number }",
        "{ key1: any, key2: any }",
        "{ key1: string | number, key2: any }"
      ]
    }
  ],
  "external": [
    "https://react-immersion-quiz.vercel.app",
    "https://typequiz.caducarvalho.vercel.app",
    "https://you-dont-know-js-quiz.vercel.app"
  ],
  "theme": {
    "colors": {
      "primary": "#177acb",
      "secondary": "#008cc1",
      "mainBg": "#3d3d3d",
      "contrastText": "#FFFFFF",
      "wrong": "#FF5722",
      "success": "#4CAF50"
    },
    "borderRadius": "4px"
  }
}